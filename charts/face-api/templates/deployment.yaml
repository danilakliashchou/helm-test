apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "faceapi.fullname" . }}
  labels:
    {{- include "faceapi.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "faceapi.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.podAnnotations }}
        {{- toYaml .Values.podAnnotations | nindent 8 }}
        {{- end }}
      labels:
        {{- include "faceapi.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}-{{ template "version" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: faceapi
              containerPort: 41101
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /api/ping
              {{- if .Values.https.enabled }}
              scheme: HTTPS
              {{- end }}
              port: faceapi
            initialDelaySeconds: 5
            periodSeconds: 20
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- include "identification" . | indent 10 }}
            {{- include "faceapi_postgres_envs" . | indent 10 }}
            {{- include "faceapi_envs" . | indent 10 }}
          volumeMounts:
            - name: config
              mountPath: /app/.env
              subPath: .env
              readOnly: true
            {{- if .Values.licenseSecretName }}
            - name: license
              mountPath: /app/extBin/unix_x64/{{ include "version" . }}/regula.license
              subPath: regula.license
              readOnly: true
            {{- end }}
            {{- if .Values.httpsCertificateSecretName }}
            - name: certificates
              mountPath: /app/certs
              readOnly: true
            {{- end }}
            {{- if .Values.logs.persistence.enabled }}
            - name: logs
              mountPath: /app/logs
            {{- end }}
{{- if .Values.extraVolumeMounts }}
{{ toYaml .Values.extraVolumeMounts | indent 12 }}
{{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ template "config" . }}
        {{- if .Values.licenseSecretName }}
        - name: license
          secret:
            secretName: {{ template "license_secret" . }}
        {{- end }}
        {{- if .Values.httpsCertificateSecretName }}
        - name: certificates
          secret:
            secretName: {{ template "certificate_secret" . }}
        {{- end }}
        {{- if .Values.logs.persistence.enabled }}
        - name: logs
          persistentVolumeClaim:
            claimName: {{ template "logs_volume_claim" . }}
        {{- end }}
{{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 8 }}
{{- end }}
